编辑器数据的初步实现：
1.将编辑器中的json数据存放在store仓库中。
2.在Pinia的store中设置更新数据的方法，方便各个组件修改更新数据。
3.直接在各个子组件使用Pinia中的数据（左侧组件库使用render数据渲染，编辑器内容也使用render渲染）
4.左侧组件库拖拽组件过去编辑器内容中，就将数据更新添加到Pinia的Store中，编辑器内容组件使用响应式Store，当数据发生变化，就重新渲染编辑器内容组件

组件选中拖拽的实现：
1.当组件被选中的时候，标记该组件为可拖拽，即在行内中使用draggable。
2.当组件在拖动的时候，根据鼠标在页面中的位置和其他未选中元素在页面中的位置出现辅助线。
3.组件拖拽完成，编辑器中的数据将整个数组拿下来，直接对数组进行一步到位的修改，实现编辑器内容的更改。（初步想法）
放置一个属性值为最后一个拖拽的元素组件，通过该属性值中的内容与没有选中的组件的内容进行一个比较



注册页面中的键盘快捷键事件
1.ctrl+z:撤回的实现：
关于前进后退的指令存储，将拖拽设置成一个指令，每一次拖拽的时候就记录该次拖拽的初状态和末状态，将该指令做成两个函数存放到一个数组中，需要的时候调用对应的数组（通过current指针实现）。

右侧操作台blockOperate绑定数据：
1.通过获取store仓库的最后一个点击聚焦元素lastfocus，获取需要的props属性或者model属性渲染
2.通过props属性的type类型渲染操作台，并将用户输入的属性值写入editData对象中
3.apply应用时，调用store仓库的changeData方法，将包含props属性值和model属性值的editData传过去
4.store仓库改变组件的值



pinia 没有激活
遇到的一个bug：pinia.mjs:1699 Uncaught Error: [🍍]: "getActivePinia()" was called but there was no active Pinia. Did you forget to install pinia?
pinia需要在vue3的setup里面声明，如果直接引用，这个时候pinia并没有加载完成，修改Nav.vue文件,将const userStore = useUserStore()放入setup里。

VNode 虚拟节点没有创建
当数据为空的时候，创建一个虚拟节点会报一个警告invalid VNode type: undefined (undefined),此时加一个非空判定就可以了。还有一种情况就是，在使用txs的时候return的出来没有一个<></>包裹要渲染的内容